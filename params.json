{"name":"Charcoal-core","tagline":"The Charcoal PHP framework","body":"Charcoal Core\r\n=============\r\n\r\n[![Build Status](https://travis-ci.org/locomotivemtl/charcoal-core.svg?branch=master)](https://travis-ci.org/locomotivemtl/charcoal-core)\r\n\r\n\r\nThe `charcoal-core` module contains abstract classes and interfaces as well as basic functionalities to create a Charcoal Project.\r\nIt is typically used with [`charcoal-base`](https://github.com/locomotivemtl/charcoal-base), which contains more concrete classes (Action, Asset, Email, Module Objet, Property<sup>\\[1\\]</sup>, Template and Widget)\r\n\r\n1. Although the core Property concepts are defined in this module, most _useful_ property types can be found in `charcoal-base`.\r\n\r\n## How to Install\r\n\r\nExcept for development purposes, this module should never be run by itself or as a standalone. Therefore, the preferred way to install this module is to require it as a `composer` dependency in a project.\r\n\r\n```shell\r\n$ composer require locomotivemtl/charcoal-core\r\n```\r\n\r\n## Dependencies and Requirements\r\n\r\nCharcoal depends on:\r\n\r\n- **PHP** 5.5+\r\n  - with [_PHP Generators_](http://php.net/generators).\r\n  - [`slim`](http://www.slimframework.com/), [`mustache`](https://github.com/bobthecow/mustache.php), [`monolog`](https://github.com/Seldaek/monologm/) (see [`composer.json`](composer.json) for details)\r\n- **MySQL**\r\n  - with [_PDO_](http://php.net/pdo)\r\n  - Other databases are currently not supported\r\n- **Apache**\r\n  - with _mod_rewrite_\r\n\r\n## Build System(s)\r\n\r\nCharcoal uses:\r\n\r\n- [**Composer**](http://getcomposer.org/) is the preferred way of installing Charcoal modules and projects.\r\n- [**Grunt**](http://gruntjs.com/) is used to build the assets from source and also to run various scripts (linters, unit tests) automatically.\r\n- [**NPM**](https://npmjs.com/) is needed for Bower and Grunt.\r\n\r\n## Table of Contents\r\n\r\nThe core concepts (namespaces) defined in Charcoal Core are:\r\n\r\n- `Cache`, for the cache interfaces as well as a few drivers.\r\n  - Available cache types: `apc`, `memcache` and `noop`.\r\n  - Extra interface: `CacheableInterface` / `CacheableTrait` for objects that can be stored in the cache.\r\n  - Default cache should typically be _memcache_.\r\n- `Config`, for the configuration objects.\r\n  - Extra interface: `ConfigurableInterface` / `ConfigurableTrait` for objects that can be defined with a `*Config` object.\r\n- `Core`, for core patterns, classes and traits.\r\n  - `AbstractFactory` / `FactoryInterface`: a base class for all Factories in Charcoal.\r\n  - `IndexableInterface` / `IndexableTrait`:\r\n    -  Defines `set_id()`, `id()`, `set_key()` and `key()`.\r\n  - `StringFormat`: a helper class to format strings, mostly for final output within templates & widgets:\r\n    - `unicode()`, `strip_tags()`, `unaccents()` and `alphanumeric()`\r\n- `Encoder`, for the encoder interfaces as well as a few drivers:\r\n  - Available encoder types: `base64`.\r\n  - Note that this is a simple encoding library,**not** a cryptographic lib.\r\n- `Loader`, for everything that can be loaded.\r\n  - Base loaders: `AbstractLoader`, `FileLoader`\r\n  - Extra interface: `LoadableInterface` / `LoadableTrait`\r\n- `Metadata`, for object definition through standardized metadata.\r\n  - Extra interfaces: `DescribableInterface` / `DescribableTrait` for objects\r\n- `Model`, for base domain model objects.\r\n  - Extra interface: `CategorizableInterface` / `CategorizableTrait`\r\n  - Extra interface: `CategoryInterface` / `CategoryTrait`\r\n  - Extra interface: `IndexableInterface` / `IndexableTrait` for models that can be loaded with `id()` (and `key()`)\r\n  - Extra interface: `RoutableInterface` / `RoutableTrait`\r\n- `Property`, the building blocks of models (through metadata)\r\n  - Only the core property concepts are defined in the `charcoal-core` module. Extra property types can be found in `charcoal-base`\r\n- `Source`, for storage (typically accessed with a Loader)\r\n  - Extra interface:\r\n- `Validator`, to validate objects / models.\r\n  - Extra interface: `ValidatableInterface` / `ValidatableTrait` for objects that can be validated with a validator.\r\n- `View` for rendering objects with templates.\r\n  - 4 core concepts: `View` and `ViewController`, `ViewEngine` and `ViewTemplate`\r\n  - Available view engines: `php_mustache` and `mustache`\r\n  - Extra interface: `ViewableInterface` / `ViewableTrait` for objects that can be rendered\r\n\r\n## Development\r\n\r\n### Coding Style\r\n\r\nAll Charcoal modules follow the same coding style and `charcoal-core` is no exception. For PHP:\r\n\r\n- [_PSR-1_](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-1-basic-coding-standard.md), except for\r\n  - Method names MUST be declared in `snake_case`.\r\n- [_PSR-2_](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md), except for\r\n  - Property names MAY be prefixed with a single, or double, underscore to indicate protected or private visibility;\r\n  - Method names MAY be prefixed with a single, or double, underscore to indicate protected or private visibility.\r\n- [_PSR-4_](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-4-autoloader.md), autoloading is therefore provided by _Composer_\r\n- [_phpDocumentor_](http://phpdoc.org/)\r\n  - Add DocBlocks for all classes, methods, and functions;\r\n  - For type-hinting, use `boolean` (instead of `bool`), `integer` (instead of `int`), `float` (instead of `double` or `real`);\r\n  - Omit the `@return` tag if the method does not return anything.\r\n- Naming conventions\r\n  - Use `snake_case`, not `camelCase`, for variable, option, parameter, argument, function, and method names;\r\n  - Prefix abstract classes with `Abstract`;\r\n  - Suffix interfaces with `Interface`;\r\n  - Suffix traits with `Trait`;\r\n  - Suffix exceptions with `Exception`;\r\n  - For type-hinting, use `int` (instead of `integer`) and `bool` (instead of `boolean`);\r\n  - For casting, use `int` (instead of `integer`) and `!!` (instead of `bool` or `boolean`);\r\n  - For arrays, use `[]` (instead of `array()`).\r\n\r\nCoding styles are  enforced with `grunt phpcs` ([_PHP Code Sniffer_](https://github.com/squizlabs/PHP_CodeSniffer)). The actual ruleset can be found in `phpcs.xml`.\r\n\r\n> ðŸ‘‰ To fix minor coding style problems, run `grunt phpcbf` ([_PHP Code Beautifier and Fixer_](https://github.com/squizlabs/PHP_CodeSniffer)). This tool uses the same ruleset as *phpcs* to automatically correct coding standard violations.\r\n\r\nThe main PHP structure follow the [_PSR-4_](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-4-autoloader.md) standard. Autoloading is therefore provided by _Composer_.\r\n\r\nFor JavaScript, the following coding style is enforced:\r\n\r\n- **TBD**\r\n\r\n### Automated Checks\r\n\r\nMost quality checker tools can be run with _Grunt_. They are:\r\n\r\n- `grunt phpunit`, to run the Test Suite.\r\n- `grunt phpcs`, to ensure coding style compliance.\r\n- `grunt jsonlint`, to validate JSON files.\r\n\r\nAll three tools can also be run from `grunt watch`.\r\n\r\nTo ensure a clean code base, pre-commit git hooks should be installed on all development environments.\r\n\r\n### Continuous Integration\r\n\r\n- [Travis](https://travis-ci.org/)\r\n- [Scrutinizer](https://scrutinizer-ci.com/)\r\n- [Code Climate](https://codeclimate.com/)\r\n\r\n### Unit Tests\r\n\r\nEvery class, method, and function should be covered by unit tests. PHP code can be tested with [_PHPUnit_](https://phpunit.de/) and JavaScript code with [_QUnit_](https://qunitjs.com/).\r\n\r\n## Authors\r\n\r\n- Mathieu Ducharme <mat@locomotive.ca>\r\n\r\n## Changelog\r\n\r\n- Unreleased.\r\n\r\n## TODOs\r\n\r\n- Add `SingletonInterface` / `SingletonTrait`\r\n- Translation (l10n) module\r\n- The main `Charcoal\\Charcoal` class should be moved to `charcoal-base` and not used anywhere directly, if possible\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}